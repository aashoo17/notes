//mongoDb basics

database->collections->documents
server can have multiple databases
databases can have multiple collections     //collection is group of JSON object(documents)
collections can have multiple documents

//documents

nothing but simple JSON object

//simple commands

mongod => to run mongoDB server
mongo => to run mongo shell

//mongo shell commands

use dbname      //dbname : database name
show dbs        //show all databases
show collections    //show all collections

//CRUD operations
//create or insert

db.collname.insert({"name":"ashutosh"})  //insert document in database collection named collname
db.collname.insertOne({"name":"ashutosh"})
db.collname.insertMany({"name":"ashutosh"})

//query

db.collname.find({"name":"ashutosh"})    //search and find document
db.collname.find()						//find everything
db.collname.find({"name":"ashutosh"}).explain()     //to see the execution details
db.collname.find({"name":"ashutosh"}).explain("executionStats")      //to see the comphrehensive execution details

//operators to filter results
db.inventory.find( { status: "A", qty: { $lt: 30 } } )     //less than
db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )   //OR condition
db.inventory.find( {
     status: "A",
     $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
} )                //AND with OR

//update

db.inventory.replaceOne(
   { item: "paper" },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 40 } ] }
)					//replace the document
db.inventory.updateMany(
   { "qty": { $lt: 50 } },
   {
     $set: { "size.uom": "in", status: "P" },
     $currentDate: { lastModified: true }
   }
)					//update multiple documents
db.inventory.updateOne(
   { item: "paper" },
   {
     $set: { "size.uom": "cm", status: "P" },
     $currentDate: { lastModified: true }
   }
)					//update one document

//Delete

db.inventory.deleteMany({})      //delete all documents in collection
db.inventory.deleteOne( { status: "D" } )      //delete one matching document

//indexing for efficient queries

db.collname.createIndex({name:1})			//creates indexes

//importing from the existing file

mongoimport --db test --collection jeeps --type json --file package.json       //import data in mongocollection json(default), csv or tsv
         																	   //type specifies type of import 
         																	   //mongoimport to be run in seperately in terminal not in mongoshell
//mongoshell can interpret javascript hence all features like variable, loops etc can be used

