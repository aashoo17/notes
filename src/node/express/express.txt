express

npm i -S express	//download
var express = require('express)
var app = express()		//create express app
app.listen(3000)		//run server on port 3000

routing
------>
app level routing 
app.get('/',(req,res)=>{
	res.send('<p>Hello World</p>')		//get,post,put,delete,all
})

seperate router level routing having only a particular concern
this makes routes easy to maintain and create independently
router can also use middleware functions of their own which will
be applicable only for them

this is a concept where you can write some route
independent of other routes and mount it on app
var router = express.Router()	//instantiate a router obj
router.get('/',(req,res)=>{		//write a path handler
	res.send()
})
module.exports = router		//export router object
app.use('/api',require('./router))	//require router and mount to /api

pattern
patterns can be passed in route string pattern,regex
string patterns
'/ab*cd'		//This route path will match abcd, abxcd, abRANDOMcd, ab123cd, and so on.
'/ab(cd)?e'		//This route path will match /abe and /abcde.

middleware
--------->
a function which can modify request and response object then pass to next middleware 
they are applied in as per their position in express app
i.e. top one will take effect first and bottom one last

think routes as siblings and only of them will be executed as per the http
request made, say
app.get()		//only on of these will run as per http req
app.post()

a simple middleware
function middle(req,res,next){
	//do something
	next()			//pass to next middleware in stack
}

using middleware
app.use(middle)


//TODOS:

router level routing and middleware
app.param and router.param
static asset deployment express.static()

preserving api routes/resource/data routes using json web token
checking authorization header req.header.authorization for jwt or query string req.query for access_token to 
check availability of jwt

error handling middleware next(err), function(err,req,res,next){}




