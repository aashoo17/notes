constants
-------->
just to define names to some working state constants will help in identifying errors
const constants = {
	ADD_DAY: "ADD_DAY",
	REMOVE_DAY: "REMOVE_DAY"
}

actions					//generally action creators will be used
------->
action will have type of action/stateChange is being incorporated
and a new state to be sent to change
const state = 5
const actions = {
	type: constants.ADD_DAY,
	payload: 10            // new state to be sent
}

reducers
------->
reducer are functions which will take state and action and convert old state to new state
const reducer = (state, action) => action.payload
all reducers should not change old values and should be pure functions
number/boolean/object reducers   //easy to create new state without changing old state
array reducers = [...[],arr]   //to add array don't use [].push()
				[].filter(()=>true/false)   //to filter and create new array
compose reducer means add one or more reducer to get new one
combine reducers
import { combineReducers } from 'redux'
combineReducers({          //should match to initial state json file  And export it to createStore
	allSkiDays,
	goal,
	error,
	combineReducers({
		fetch,
		closeFetch
	})
})

store
---->
store will dispatch all the actions 
import { createStore } from "redux"
const store = createStore(reducer)     //can take optional initialState createStore(reducer,initialState)
store.dispatch(action)   //to dispatch action means to change state
store.getState()   //to get the current state
const unsubscribe = store.subscribe(()=>console.log('send this after dispatch'))    //will run the function after dispatch
unsubscribe()   //unsubscribe so next will not run after dispatch

middleware
--------->
It provides a third-party extension point between dispatching an action, and the moment it reaches the reducer
let  middleWareName = store => next => action => {       //a sample middleware
	let result 
	result = next(action)   //dispatch action
	return result
}
import { applyMiddleware } from 'redux'
applyMiddleware( middleWareName, thunk )(createStore)(combineReducers[,initialState])    //initialState is optional
																						//if using applyMiddleWare no need to use createStore
																						//seperately

action creators
-------------->
action creators are functions which will return action object
before returning the action they can have some code logic inside

const actionCreator = () => {type: constants.ADD_DAY,payload: 10}   //code logic can be included before returning the actions

redux-thunk
---------->
redux-thunk is a middleware to work with asynchronous actions
import thunk from 'redux-thunk'
thunks are written same like reducers but higher order functions means return will also be a function
const thunkName = () => (dispatch, getState) => {
	//can get state
	getState()
	//can dispatch actions
	dispatch({
		type: constants.ADD_DAY,
		payload: 10
	})
	//can dispatch action after some time
	setTimeout(()=>dispatch({
		type: constants.ADD_DAY,
		payload: 10
	}),1000)
}

applyMiddleware( middleWareName, thunk )(createStore)(combineReducers[,initialState])  //add thunk in store
//TODO: if applymiddleware is used is creating store seperately is not required?

store.dispatch(thunkName())      //dispatching a thunk same like reducers

react-redux
---------->
helps in integrating react ui from data containers
feed data to props of component from redux store
presentational component => only used to create UI
container component => having data concern

generally created container folder with same name as component
<SkiDayCount total={100} powder={25} backcountry={25}/>         //hard coded data to ui element props
use connect from react redux to attach them
import SkiDayCount from '../ui/SkiDayCount'
import {connect} from 'react-redux'

const mapStateToProps = ( state ) => {        //return all the props
	return 
	{
	total: state.allSkiDays.length,
	powder: some calculation as above,
	backcountry: some calculation as above
	}
}
const Container = connect(mapStateToProps)(SkiDayCount)

const mapDispatchToProps = (dispatch) => {     //dispatch an action
	return {
		onClearError(index){
			dispatch(clearError(index))
		}
	}
}

const mapDispatchToProps = (dispatch) => {
    return (
        {
            onClick(){				//onClick is prop which will be called on clicking onClick
                dispatch(action())	//<button onClick={this.props.onClick}>Button</button>
            }
        }
    )
}

mapStateToProps and mapDispatchToProps both will return props as JS object 
where mapStateToProps returns as values
and mapDispatchToProps returns as function

const Container = connect(mapStateToProps, mapDispatchToProps)(ShowErrors)
<ShowErrors errors={['sample error']} onClearError = {index => console.log('log something')} />

for rendering the component we will use container component instead of ui i.e. wrapped in Provider
import App from './container/App'
import {Provider} from 'react-redux'
ReactDOM.render(<Provider store={store}><App/></Provider>,$('#root')[0])

 
 