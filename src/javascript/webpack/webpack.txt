default configs file
webpack.config.js
webpack.config.babel.js

if one of the above is present in root directory will be used by webpack automatically
webpack.config.babel.js will be compiled by babel and then used it will help in using newer js syntax
like import export etc

passing webpack config manually using --config
webpack --config webpack.prod.config.babel.js

config file should be exporting an object 

let config = {}
module.exports = config		//in commonJS/node syntax
export default config		//in new js syntax

config file keys

entry
entry is used to define the file which webpack uses to entry point to start

output
	filename		//define name of the file outputed by webpack
	path			//path where file will be created
	chunkFilename		//if lazy loading is happening i.e file loading on demand how to name them
	publicPath			//TODO: to be updated
resolve
when importing files generally .js or others not mentioned
it helps webpack to try with these extensions

module
	rules
	in older version loaders was used and now only aliases rules and loaders will be deprecated
		test
		let webpack know which files to be used
		exclude
		exclude the files in this folder
		loader
		specify the loader for doing its job generally used when single loader is used as difficult
		to pass additional options here
		though it can also chain loaders as following
		'style-loader!css-loader!sass-loader'	or
		['style-loader','css-loader','sass-loader']
		loaders are used by webpack from right to left here so sass-loader is applied first
		use
		use is same as loader but generall used when multiple loaders are used in chain	
		and some optional configuration is to be passed to loaders
		use:[
          {loader: 'style-loader'},
          {
            loader: 'css-loader',
            options: {
              importLoaders: 1,
              modules: true,
              localIdentName: '[name]_[local]_[hash:base64:5]'
            }
          },
          {
            loader: 'postcss-loader',
            options:{
              ident: 'postcss',
              plugins: () => [
                autoprefixer({
                  browsers:[
                    "> 1%",
                    "last 2 versions"
                  ]
                })
              ]
            }
          }
        ]
        here loaders will be used by webpack from bottom to top so postcss-loader is applied first
        plugins in loader can enhance its working capabilities but needs to be installed seperately
        extra options is passed by options object or by query parameter
        option e.g.
        {
            loader: 'postcss-loader',
            options:{
              ident: 'postcss',
              plugins: () => [
                autoprefixer({
                  browsers:[
                    "> 1%",
                    "last 2 versions"
                  ]
                })
              ]
            }
          }
          query parameter e.g.
          loader: 'url-loader?limit=10000&name=images/[name].[ext]'
devtool
webpack outputs a long file and is dificult to debug after loader and plugins are applied and generating 
a big file for getting the original source map of files to easily identify the errors in code at the time if debugging
devtool:'cheap-module-eval-source-map'		//best one to use as of now

devServer
developement server for webpack addition module needs to be installed webpack-dev-server
port
port will define the port server will run default to 8080 if not specified
hot
hot true will set the hot module replacement (HMR) active and css style will be updated on server without reloading 
page it will help in faster developement and state of application will not be lost
inline
//TODO: to be clarified
Toggle between the dev-server's two different modes. By default the application will be served with inline mode enabled. 
This means that a script will be inserted in your bundle to take care of live reloading, and build messages will appear in the browser console.
It is also possible to use iframe mode, which uses an <iframe> under a notification bar with messages about the build. To switch to iframe mode:
inline false
proxy
proxy request to another server if the current route is not found in application
proxy: {
      "/api": "http://localhost:4000"
    }
    
plugins 
plugins give extra functionality to webpack lots of plugins are included by webpack and other can be downloaded from npm registry
	ProvidePlugin
	this plugin is used when a script is dependent on global variable in window 
	like bootstrap is dependednt on jquery and make a check for its availability on window object
	when you are doing
	import $ from 'jquery' or import jQuery from 'jquery'
	it will not create global variable $ or jQuery as modules do not pollute global object
	import ProvidePlugin from 'webpack/lib/ProvidePlugin'
	new ProvidePlugin({
      $: 'jquery',
      jQuery: 'jquery',
    })
    
    webpack hot module replacement plugin
    it should be used when using hot true in sevServer for HMR
    import webpack from 'webpack'
    new webpack.HotModuleReplacementPlugin()
    
    html-webpack-plugin
    this plugin is interesting and can inject your webpack generated script in
    any html file in memory 
    So no need to actually generate any file by webpack in developemnt
    this plugin provides some default templates that can be used
    we will use our own created template and tell it to use this one
    new HtmlWebpackPlugin({
      template: 'public/index.html',		//use the template as index.html in public folder
      filename: 'index.html',				//name of file created by this plugin could be changed to any .html
      inject: 'body'						//inject the script in body tag
    })
    import HtmlWebpackPlugin from 'html-webpack-plugin'
    
    

//sample config
import path from 'path'
import autoprefixer from 'autoprefixer'			//plugin to prefix css properties to be consistent in all browsers
import HtmlWebpackPlugin from 'html-webpack-plugin'
import webpack from 'webpack'
import ProvidePlugin from 'webpack/lib/ProvidePlugin'

const config = {
  entry: './src/index.js',				//webpack entry file
  output: {
    filename: 'index.min.js',			//name of the file generated by webpack
    path: path.resolve(__dirname,'dist'),	//path to create webpack genetated code
    chunkFilename: '[id].js',				//lazy loaded file name	[id] 
    publicPath: ''					
  },
  resolve:{
    extensions: ['.js','.jsx']				//use this extension to resolve file if not assigned in imports
  },
  module:{
    rules: [
      {
        test: /\.js$/,						//type of file loader to be used	\. means literal value as . and $ means filename should end with preceding characters
        exclude: /node_modules/,			//exclude files in this folder
        loader: 'babel-loader',
      },
      {
        test:/\.css$/,						//it will check for filename ending with .css => regex /\.css$/ 
        exclude: /node_modules/,
        use:[
          {loader: 'style-loader'},
          {
            loader: 'css-loader',
            options: {
              importLoaders: 1,				//specify how many loaders are used before css-loader
              modules: true,
              localIdentName: '[name]_[local]_[hash:base64:5]'
            }
          },
          {
            loader: 'postcss-loader',
            options:{
              ident: 'postcss',
              plugins: () => [
                autoprefixer({
                  browsers:[				//what type of browsers to be supported
                    "> 1%",
                    "last 2 versions"
                  ]
                })
              ]
            }
          }
        ]
      },
      {
        test: /\.(png|jpe?g|gif)$/,
        loader: 'url-loader?limit=10000&name=images/[name].[ext]'		//limit=10000 filesize of <=10mb to be handled only name= gives name to the files [name]name[ext]extension
      }
    ]
  },
  devtool:'cheap-module-eval-source-map',		//source map for original file
  devServer:{
    port:3000,			//port no
    hot:true,			//hot module reolacement
    inline:true,
    proxy: {
      "/": "http://localhost:4000"		//proxy to this server if route is not found
    }
  },
  plugins:[
    new ProvidePlugin({					//make available variable in global scope
      $: 'jquery',
      jQuery: 'jquery',
    }),
    new HtmlWebpackPlugin({
      template: 'public/index.html',		//custom template to be used for injecting file in script from webpack
      filename: 'index.html',
      inject: 'body'
    }),
    new webpack.HotModuleReplacementPlugin()		//used for HMTR when hot true  in devServer
}

export default config


loaders explained

babel-loader
babel-core needs to be installed to use babel-loader
improve functionality by plugins
babel-preset-env	//all new js syntax which are accepted in language but does not inclue draft mode i.e. stage-1 stage-2 etc
babel-preset-react		//change jsx to js
babel-preset-stage-2		//use stage-2 features
babel-plugin-syntax-dynamic-import	//for using dynamic import statement

babel-loader defines its configuartion seperately in .babelrc file
{
  "presets":[				//preset to be used by babel
    ["env",{				//env preset
      "targets":{			//which browser needs to be supported
        "browsers":[
          "> 1%",
          "last 2 versions"
        ]
      },
      "useBuiltIns": "entry"
    }],
    "stage-2",				//stage-2 preset
    "react"					//react preset
  ],
  "plugins":[
    "syntax-dynamic-import"		//syntax-dynamic-import preset
  ]
}
    
css-loader
support import of css file in javascript file

style-loader

url-loader

file-loader

sass-loader
use this loader to support SCSS/sass
loader:['style-loader','css-loader','sass-loader']
		
	
	
